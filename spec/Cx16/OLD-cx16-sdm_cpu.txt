

             &&
     ,_____&&&_____,
    //             \\
   //               \\
   |  P u m p k i n  | 
   |                 | 
   \\    C e l l    //
    \\             //
     '\___________/'



====================================
-=-=-                          -=-=-
-=-=-=-  CIMC Arch (16-bit)  -=-=-=-
-=-=-                          -=-=-
====================================



   Software Developer's Manual
   
           Version 1.0
   
   
   Copyright (c) SyberMCd 2020-2021
   Copyright (c) Adam2004yt 2021
   
   
   Prototype built by:
    Adam2004yt
    PumpkinCell
    SyberMCd



====================================

    
   
   ===== SHORTCUTS =====



Op - Opcode (Operation Code)
Mm - Mnemonic (in assembly)
Args - Arguments (in assembly)
AddB - Additional Byte (used for storing operation argument)
CimcC - Instruction representation in CimcC language

ia - Instruction Address



   ===== PHYSICAL ARCHITECTURE =====

   
   
-- Instruction Loader --

           ,-----,
    Ack  --|     |    
    D0   --|     | 
    D1   --|     | 
    D2   --|     | 
    D3   --|     | 
    D4   --|     |  [TODO]
    D5   --|     | 
    D6   --|     | 
    D7   --|     | 
    Rq   --|     | 
    RqOn --|     | 
           '-----'



   ===== PROCESS =====



-- CPU Cycle --

See Control-Unit.mod



   ===== INTERRUPTS =====



-- Internal Interrupts --

If an interrupt is called, the registers are placed
on stack in the following order:

 PUSH16 ip
 PUSH8 flags
 [PUSH16 arg]

'arg' is a 16-bit value which gives additional
information about interrupt.
If IRET is called, these registers are popped from
the stack in the reverse order. The arg must be
popped manually by operating system.

 [POP16 arg] // done by OS
 POP8 flags
 POP16 ip

No  Id    Arg  Mm    Purpose
---------------------------------------------------
0   INT0  no   #IM   Invalid Math Operation
1   INT1  no   #II   Invalid Instruction
2   INT2  no   #R1   Reserved
3   INT3  yes  #PF   Page fault (arg - [OPE0000|9b fault page]) OP - (0-Read,1-Write,2-Execute,3-Reserved)  E - If physical page exists
4   INT4  no   #R3   Reserved
5   INT5  yes  #R4   Reserved (arg is ignored)
6   INT6  no   #U1   User Accesible #1
7   INT7  no   #U2   User Accesible #2
---------------------------------------------------
8   IRQ0  no   #IQ0  Device Interrupt #0
9   IRQ1  no   #IQ1  Device Interrupt #1
10  IRQ2  no   #IQ2  Device Interrupt #2
11  IRQ3  no   #IQ3  Device Interrupt #3
12  IRQ4  no   #IQ4  Device Interrupt #4
13  IRQ5  no   #IQ5  Device Interrupt #5
14  IRQ6  no   #IQ6  Device Interrupt #6
15  IRQ7  yes  #IQ7  Cascaded Interrupt (reserved)
---------------------------------------------------

The User Accessible Interrupts can be called using an INT instruction.

The Cascaded Interrupt is reserved for scalability.

See Control-Unit.mod for further information.



   ===== REGISTERS =====



-- General-Purpose Registers --

Mm  Size Notes         MSB 0      8     16 LSB
ax  16b  Accumulator       [[-ah-] [-al-]]
bx  16b  Base              [[-bh-] [-bl-]]
cx  16b  Counter           [[-ch-] [-cl-]]
dx  16b  Data              [[-dh-] [-dl-]]
sp  16b  Stack pointer
bp  16b  Base pointer
// TODO: cycle counting ??


-- Control Registers --

Mm  Size Notes
ip  16b  Instruction Pointer
fl  16b  Flags (effectively 8bit)
ivt 8b   Interrupt Vector Table Pointer
-------------------------------------------------
c0  16b  Control Register 0 (Paging descriptor 0)


-- Flags Register --

rrrrrrrrxxxxxxxx
          PNZOGI

P(Paging) I(Interrupt) G(Greater) O(Overflow) Z(Zero) N(In Interrupt)


-- Internal CU Registers --

These registers are not accesible by user.

Mm    Size  Notes
addb  2b    Additional bytes needed flag
 * 00 - Not needed     N
 * 01 - 1 Byte needed  1
 * 10 - 2 Bytes needed 2
 * 11 - Not checked    3
 
 
 
   ===== VIRTUAL MEMORY =====
   
   
   
-- Paging --

If PF is set, all instructions uses virtual adresses. They
are mapped to physical memory using Memory Management Unit.

The memory is divided into 512-byte pages.

Max addressable memory: 65536 B (16-bit address) / 128 pages (7-bit page ID)
Implementation: 8192 B / 16 pages

The virtual address is divided into parts:

0       4     7 8              16
+---------------#---------------+
|   Page ID   |   Page Offset   |
+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
| PTidx |Pidx |  Page-rel addr  |
+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
    |      |           |
    |      |           '------- (R) Address relative to page
    |      '------------------- (P) Page index in Page Table
    '-------------------------- (PT) Page Table index in Page Directory


Physical address is calculated using following formula:

((PDaddr[PT].addr)[P]).addr


                0       4     7 8              16
                +-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
                | PTidx |Pidx |  Page-rel addr  |  Virtual address
                +-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
                    |       |          |
                   idx     idx         |
                    |       |          |
            ,-------+-+-----+------,   |
PD address>-|    PD   | Page Table |   |
            '----+----+---+--+-----'   |
                 |        |  |         |
                 '--off->-'  |         |
                       ,--<--'         |
                0      |      7 8      |       16
                +-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
                |   Page ID   |  Page-rel addr  |  Physical address
                +-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+


In result, the entire virtual address space is divided
into 16 equal parts (each described by one page table).
These parts are further divided into 8 equal parts (pages),
each described by page table descriptor. This makes
implementation using only 2 page tables.


-- Enabling Paging --

Paging is enabled by calling PGE instruction. The format 
of argument:

0   2 3   5     8 9            16
+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
|Cps|L|Res| PDsiz | PD address  |
+-+-+-+-+-+-+-+-#-+-+-+-+-+-+-+-+
  |  |  |     |          |
  |  |  |     |          '-------- Page Directory physical page number, in pages.
  |  |  |     '------------------- Page Directory entry count - max 16
  |  |  '------------------------- Reserved
  |  '---------------------------- Whether the data should be loaded from 
  |                                RAM - slow, but needed at the first time. 
  |                                0 can be used to switch PDs.
  '------------------------------- Cache Index
  

-- Page Directory --

Page Directory has a maximum of 16 entries describing 
virtual memory divided into a maximum of 16 equal parts. It must
be page-aligned. The real number of entries can be specified in
PGE instruction (using PDsiz). The maximum size of PD is 16B.

Page Table descriptor in Page Directory:

0 1             8
+-+-+-+-+-+-+-+-#
|M|  PT offset  |
+-+-+-+-+-+-+-+-#
 |       '-------- Page Table address offset (relative to PD address), in 4B-blocks. If 0, #PF is triggered on access.
 '---------------- Mapped flag (If not set, the space will be considered identity-mapped)


Calculating address of page table descriptor in page directory:

PTaddr = PD address * 512 + PT offset * 4
  

-- Page Table --

Page Table is pointed by Page Directory entry and has 8 entries
It must be placed in the same page as Page Directory. The 
resulting size of Page Table is 8B.

Page descriptor in Page Table:

0 1             8
+-+-+-+-+-+-+-+-#
|P|Page physical|
+-+-+-+-+-+-+-+-#
 |       '-------- Page Table physical address, in pages.
 '---------------- Present (should NOT crash when accessed)

Calculating address of page descriptor in page table:
Paddr = PTaddr + PIdx

Calculating resulting physical address:
Phys = Page physical * 512


-- Page Directory Caching --

When an instruction writes to c0, the Page Directory is
loaded from RAM to cache specified by Cache Index (PDCI).
The cache stores max. 4 page directories with their
corresponding page tables.

Page Directory Cache size: 4 PDs * 16 PT descr * 1B/descr = 4x16x1B = 64B (16B)
Page Table Cache size: 4 PDs * 16 PTs * 8 Page descr * 1B/descr = 4x16x8x1B = 256B (64B)
Total size: 320B

Cache can be switched using PGE instruction, if L = 0.



   ===== ASSEMBLY =====


   
// TODO: calling convention. I prefer __fastcall because it's fast :) 

   
-- Detailed Description --

----------------------------------------------
OUT16 a, b -> 16-bit Output to Port
 CimcC  out16(a, b); // a-port, b-value
 
Reserved Opcode Range: /3 (32 insn)
x = port number (16x)

Op  Mm     Args      AddB
0x  OUT16  ax -> *x  N

----------------------------------------------
OUT8 a, b -> 8-bit Output to Port
 CimcC  out8(a, b); // a-port, b-value
 
Reserved Opcode Range: /3 (32 insn)
x = port number (16x)

Op  Mm     Args      AddB
1x  OUT8   al -> *x  N
 
----------------------------------------------
IN16 a, b -> 16-bit Input from Port
 CimcC  b = in16(a)
 
Reserved Opcode Range: /4 (16 insn)
x = port number (16x)

Op  Mm    Args      AddB
2x  IN16  ax <- *x  2(b)
 
----------------------------------------------
MOV a, b -> Move Value from 'a' to 'b'
 CimcC  a = b; paging_enable(a)

Reserved Opcode Range: /4 (16 insn)
 
Op  Mm  Args        AddB  Notes
30  MOV ax <= bx    N
31  MOV ax <= dx    N
32  MOV bx <= ax    N
33  MOV bx <= dx    N
34  MOV cx <= ax    N
35  MOV cx <= dx    N
36  MOV dx <= ax    N
37  MOV dx <= [bx]  N     Read RAM at bx
38  MOV dx <= mem   2(b)  Read RAM
39  MOV mem <= dx   2(a)  Write RAM
3A  MOV [bx] <= dx  N     Write RAM at bx
3B  MOV ax <= flags N
3C  MOV ax <= val   2(a)
3D  MOV bx <= val   2(a)
3E  MOV cx <= val   2(a)
3F  MOV dx <= val   2(a)

----------------------------------------------
J*c a -> Jump Conditionally
 CimcC  if(...) eip = a;
 Jumps to 'a' if specific flags are set. Clears these flags.
 
Reserved Opcode Range: /5 (8 insn)

Op  Mm  Args  AddB  Notes               Alias
40  JMP ia    2(a)  Unconditional  
41  JZ  ia    2(a)  If ZF is set        JE
42  JG  ia    2(a)  If GF is set
43  JL  ia    2(a)  If OF is set
44  JNE ia    2(a)  If GF or OF is set
45  .. Reserved ..
46  .. Reserved ..
47  .. Reserved ..

----------------------------------------------
CMP a, b -> Compare Values 'a', 'b'
 CimcC  a ?? b;

Reserved Opcode Range: /5 (8 insn)

Op  Mm  Args       AddB
48  CMP ax =? dx
49  CMP bx =? dx
4A  CMP cx =? dx
4B  .. Reserved ..
4C  CMP ax =? val  2(b)
4D  CMP bx =? val  2(b)
4E  CMP cx =? val  2(b)
4F  CMP dx =? val  2(b)

----------------------------------------------
PUSH a -> Push 'a' to Stack
 CimcC  push(..)
 
Reserved Opcode Range: (5 insn)

Op  Mm     Args  AddB  Notes
50  PUSH   ax
53  PUSH   dx   
52  PUSHA              All registries (ax,bx,cx,dx,sp,flags)
53  PUSH8  val   1(a)  1 byte
54  PUSH16 val   2(a)  2 bytes

----------------------------------------------
POP a -> Pop from Stack to 'a'
 CimcC  pop(..)
 
Reserved Opcode Range: (3 insn)

Op  Mm    Args  AddB  Notes
55  POP   ax          2 bytes
56  POP   al          1 bytes
57  POPA              All registries (ax,bx,cx,dx,sp,flags)      

----------------------------------------------
ADD a, b -> Add from 'a' to 'b'
 CimcC  a += b;

Reserved Opcode Range: /5 (8 insn)

Op  Mm  Args       AddB
58  ADD ax <+ val  2(b)
59  ADD ax <+ bx   
5A  ADD ax <+ dx
5B  ADD cx <+ val  2(b)
5C  ADD cx <+ bx   
5D  ADD cx <+ dx
5E  ADD sp <+ val  2(b)
5F  ADD bp <+ val  2(b)

----------------------------------------------
SUB a, b -> Subtract from 'a' to 'b'
 CimcC  a -= b;
 
Reserved Opcode Range: /6 (4 insn)

Op  Mm  Args       AddB
60  SUB ax <- val  2(b)
61  SUB ax <- bx   
62  SUB ax <- dx
63  SUB cx <- val  2(b)
64  SUB cx <- bx   
65  SUB cx <- dx
66  SUB sp <- val  2(b)
67  SUB bp <- val  2(b)

Sets:
 ZF if result == 0
 OF if result < 0 (result & 0x80 == 1)
 GF if result > 0

----------------------------------------------
MUL a, b -> Multiply from 'a' to 'b'
 CimcC  a *= b;
 Saves MSB -> DX, LSB -> AX
 
Reserved Opcode Range: /6 (4 insn)

Op  Mm  Args             AddB
68  MUL ax <* val %> dx  2(b)
69  MUL ax <* bx %> dx

----------------------------------------------
DIV a, b -> Divide from 'a' to 'b'
 CimcC  a /= b;
 Saves modulus (a %= b) to DX
 
Using the opcode always triggers INT0 if b == 0
Reserved Opcode Range: /7 (2 insn)

Op  Mm  Args                AddB
6A  DIV ax </ val %> dx  2(b)
6B  DIV ax </ bx %> dx

----------------------------------------------
AND a, b -> Byte AND from 'a' to 'b'
 CimcC  a &= b;
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm  Args       AddB
6C  AND ax <& val  2(b)
6D  AND ax <& bx

----------------------------------------------
OR a, b -> Byte OR from 'a' to 'b'
 CimcC  a |= b;
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm  Args       AddB
6E  OR  ax <| val  2(b)
6F  OR  ax <| bx

----------------------------------------------
NEG a -> Byte/Logic Negate 'a'
 CimcC  a = !a;
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm  Args  Notes
70  NEG ax    Byte Negate
71  NOT ax    Logic Negate

----------------------------------------------
RET -> Return from Procedure
 CimcC  return; [ip = *sp; sp--;]
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm   Notes
72  RET  
73  IRET Return from Interrupt; clears IIF

----------------------------------------------
CALL a -> Call Procedure
 CimcC  (*a)(); [*sp = ip; jmp(a);]
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm   Args  AddB
74  CALL ia    2(a)
75  CALL ax    N

----------------------------------------------
LIVT a -> Load Interrupt Vector Table
 CimcC  ivt = a;
 
Reserved Opcode Range: /8 (1 insn)

IVT structure:

0    4    8        16     8+16*size 
+----+----+---------+---------+
|0000| Sz |  Adresses x Size  |
+----+----+---------+---------+

Op  Mm   Args  AddB
76  LIVT ia    2(a)

----------------------------------------------
DBG -> Debug Print
 CimcC  dbg();
 
Reserved Opcode Range: /8 (1 insn)

Note: If this instruction gets called in production
environment, it's considered an "Invalid Instruction".
The argument is used for debugging control unit and
is ignored.

Op  Mm   AddB
77  DBG  2(ignored)

----------------------------------------------
HLT a -> Halt Processor
 CimcC  hlt();
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm
78  HLT

----------------------------------------------
EXT ... -> Extended Operations

These opcodes are used to add new operations
in the future. They are reserved in current
version of spec. Using them triggers "Invalid
Instruction" trap.

Reserved Opcode Range: /7 (2 insn)

Op  Mm   AddB
79  ...  ...

----------------------------------------------
INT a -> Interrupt
 CimcC int(a)

Reserved Opcode Range: /7 (2 insn)

Note: The user-callable interrupts are #U1 and #U2.

Op  Mm
7A  INT #U1
7B  INT #U2

----------------------------------------------
NEG a -> Byte/Logic Negate 'a'
 CimcC  a = !a; a = -a
 
Reserved Opcode Range: /7 (2 insn)

Op  Mm  Args  Notes
7C  NEG ax    Logic Negate
7D  NOT ax    Arithmetic Negate

----------------------------------------------
STI a -> Set Interrupt Flag
 CimcC  __builtin_sti();
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm
7E  STI // we have AND,OR with flags, do we need that ?

----------------------------------------------
CLI a -> Clear Interrupt Flag
 CimcC  __builtin_cli();
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm
7F  CLI // we have AND,OR with flags, do we need that ?

----------------------------------------------
IN8 a, b -> 8-bit Input from Port
 CimcC  b = in8(a)
 
Reserved Opcode Range: /4 (16 insn)
x = port number (16x)

Op  Mm   Args
8x  IN8  al <- *x
 
----------------------------------------------
INC a -> Increment a
 CimcC  a++;
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm
90  INC ax

----------------------------------------------
DEC a -> Decrement a
 CimcC  a--;
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm
91  DEC ax

----------------------------------------------
XOR a, b -> Exclusive OR from 'a' to 'b'
 CimcC  a ^= b;
 
Reserved Opcode Range: /6 (4 insn) + /7 (2 insn)

Op  Mm   Args       AddB  Notes
92  XOR  ax <^ val  2(b)
93  XOR  ax <^ bx   N
94  XOR  ax <^ ax   N     Clear ax
95  XOR  bx <^ bx   N     Clear bx
96  XOR  cx <^ cx   N     Clear cx
97  XOR  dx <^ dx   N     Clear dx

----------------------------------------------
AND a, b -> Byte AND of Flags with 'b'
 CimcC  flags &= b;
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm  Args          AddB
98  AND flags <& val  2(b)

----------------------------------------------
OR a, b -> Byte OR of Flags with 'b'
 CimcC  flags |= b;
 
Reserved Opcode Range: /8 (1 insn)

Op  Mm  Args          AddB
99  OR  flags <| val  2(b)

----------------------------------------------
PGE a -> Enable Paging
 CimcC  __builtin_paging_enable(a)

Reserved Opcode Range: /8 (1 insn)

Note: See Virtual Memory / Enabling Paging.

Op  Mm  Args  AddB
9A  PGE ax    N

----------------------------------------------
MOV a, b -> Move Value from 'a' to 'b'
 CimcC  a = b;

Reserved Opcode Range: (5 insn)
 
Op  Mm  Args          AddB
9B  MOV ax <= [bp+x]  1(x)
9C  MOV bx <= [bp+x]  1(x)
9D  MOV cx <= [bp+x]  1(x)
9E  MOV dx <= [bp+x]  1(x)
9F  MOV bp <= sp

----------------------------------------------
XCHG a, b -> Exchange Values
 CimcC  __builtin_xchg(a, b);

Reserved Opcode Range: /4 (16 insn)
 
Op  Mm   Args       AddB  Notes
A0  XCHG ax <> ax   N     Debug
A1  XCHG ax <> bx   N
A2  XCHG ax <> cx   N
A3  XCHG ax <> dx   N
A4  .. Reserved ..
A5  XCHG bx <> bx   N     Debug
A6  XCHG bx <> cx   N
A7  XCHG bx <> dx   N
A8  .. Reserved ..
A9  .. Reserved ..
AA  XCHG cx <> cx   N     Debug
AB  XCHG cx <> dx   N
AC  .. Reserved ..
AD  .. Reserved ..
AE  .. Reserved ..
AF  XCHG dx <> dx   N     Debug

----------------------------------------------
Opcodes not listed here (B0-FF) are all reserved.
If they are called, an Invalid Instruction trap
is triggered.
