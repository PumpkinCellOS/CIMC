

             &&
     ,_____&&&_____,
    //             \\
   //               \\
   |  P u m p k i n  | 
   |                 | 
   \\    C e l l    //
    \\             //
     '\___________/'

   
     
====================================
-=-=-                          -=-=-
-=-=-=-  CIMC Arch (16-bit)  -=-=-=-
-=-=-                          -=-=-
====================================


    Cx16 Mass Storage with FS
           acceleration
   
           Version 1.0
   
   
   Copyright (c) Adam2004yt 2020
   
   
   Prototype built by:
    Adam2004yt
    PumpkinCell
    SyberMCd



=====================================



   ===== DEFINITIONS =====
   
   
   
Block - MC block, typically considered as 1m x 1m x 1m cube.



   ===== OVERVIEW =====



The mass storage will have 64 KiB of capacity. The address size
is 16-bit.

+----+----+
|Chip|Cell|
+----+----+
   |    '--- 1-Byte cell selection
   '-------- Chunk selection

The mass storage is divided into eight 8 KiB blocks that can work
simultaneously. Each block is further divided into 32 chunks, each
of 256B size divided finally into 32B-segments.



   ===== BLOCK REFERENCE =====



The Block name is used for I/O interface and are referred as
"partition names".

ID         Purpose           Name
000 (0x0)  System block      /sys
001 (0x1)  Sound block       /snd
010 (0x2)  User app block    /app
011 (0x3)  Name registry     /nam
100 (0x4)  Data block (I)    /dt0
101 (0x5)  Data block (II)   /dt1
110 (0x6)  Data block (III)  /dt2
111 (0x7)  Data block (IV)   /dt3


-- System block --

The system block has the most priority. Here are stored system
files used directly by RAM and CPU. They are read in background.


-- Sound block --

The sound block was distinguished because of need of parallel
playing sound along with running program. It is used only by
soundcard.


-- Application block --

The application block stores compiled executable files written
using machine code (assembler).


-- Data blocks --

Data blocks stores all files and directories in system (except
/sys) and links to another files in another blocks.



   ===== CONSTRUCTION OF DATA BLOCK =====



The data blocks has form of "matrix" of size 8x4 chunks. Every
chunk has a size of 24x28 MC blocks with spacing 6 MC blocks
upwards and 3 MC blocks across. The first 3 bits are used for
adressing blocks in storage, and the last 5 for selecting 
a chunk in a block.



   ===== STORAGE CONTROLLER =====
   
   
   
-- Overview --

The whole disk is managed by storage controller, which task is
to read data and transfer them outside the disk. It has a 16-bit
ID counter incremented by 1 on each object creation. Hovewer,
after object removal, the ID cannot be recycled and is lost.

The IDs can be restored for disks that have #IR (0x2) DI
capability set.


-- Helper segments --

* The controller consists of "element index", the memory used to
register all objects in the system.

* The controller has also a "segment registry" which stores information
about occupancy of segments.

The goal of these registries is maximal improvement of file access,
so that the controller does not have to search file throughout the
disk.

// TODO ...

Kontroler korzysta
także z zapisu 4 bajtów będących ID folderu w którym jesteśmy
oraz ID folderu nadrzędnego. Ma także pamięc podręczną, tymczasową
o pojemności 2 segmentów. Zapisyawnie na niej odbywa się poprzez
nadpisywania kolejnych pustych bitów. Jeśli zabraknie miejsca,
licznik się zeruje i "leci" od nowa. Jeśli napotka na zapełniony
bajt, musi czekać. Odczyt danych postępuje analogicznie tylko
wysyła dane i kasuje miejsce. Pamięć podręczna służy jedynie do
odczytu bloków danych. Inne bloki zczytywane są już przy dostępie
do bloku.



   ===== FILESYSTEM =====



W spisie elementów jest podział na 16 B segmenty. Sposób zapisu
w rejestrze:

1 i 2 bajt - ID elementu
Bajty 3 do 11 - nazwa
12 bajt - kropka czyli 0010 1110
13 bajt - rozszerzenie
14 i 15 bajt - adres segmentu początkowego.
16 bajt - ilość zajmowanych segmentów. Na jej podstawie obliczana
          jest waga elementu.

Maksymalną ilością elementów będących na komputerze jest 1024,
element po usunięciu traci swoją pozycję, a na jego miejsce wskakuje
następny utworzony.

Rejestr segmentów podzielony jest na rejestry po 2 bajty. Jest to
po prostu adres segmentu w 11 bitach, przerwa 4 zer oraz 1 bit
stanu segmentu. Segmentów składających się na cały dysk jest
łącznie 2048.



   ===== PROCESS =====



-- Object creation --

Tworzenie elementu odbywa się następująco:
1. Wybranie pierwszego wolnego segmentu w rejestrze i oznaczenie
   go jako zajęty,
2. Przypisanie elementowi ID w spisie i pierwszych 2 bajtach
   segmentu,
3. Zwiększenie licznika ID o 1,
4. Nadanie nazwy i wpisanie do rejestru,
5. Nadanie rozszerzenia elementowi w rejestrze. Jeśli jest to
   folder, jego rozszerzenie wynosi 1010 1010,
6. Utworzenie miejsca na dane poprzez nadpisanie 3 bajtu w segmencie
   na dysku ciągiem jedynek,
7. Tworzenie danych w bajtach od 4 do 30, jeśli jest mniejsza
   liczba danych, reszta miejsca uzupełniana jest zerami,
8. W bicie 31 do 32 należy skierować do następnego segmentu, jeśli
   kolejne segmenty graniczą ze sobą, dane zapisywane
   są do bajtu: ilość segmentów w kostce * 8 - 2,
9. Rozpoczynając kolejny segment należy nadpisać bity na ID
   oraz rozpoczynający ciąg jedynek,


-- Directory listing --
   
Odczyt elementów folderu:
1. Wczytanie ID folderu docelowego,
2. Zdobycie adresu pierwszego segmentu folderu,
3. Zczytanie danych z bloku do pamięci podręcznej,
4. Odczytanie kolejnego ID i wyszukanie go w rejestrach,
5. Wczytanie informacji z rejestru,


-- Object read --

Odczyt pliku:
1. Wyszukanie elementu w rejestrze,
2. Zczytanie danych do pamięci podręcznej,
3. Sprawdzenie w rejestrach sposobu odczytu danego rejestru,
4. Odczyt danych i wykonanie instrukcji,


-- Object write --

// TODO
