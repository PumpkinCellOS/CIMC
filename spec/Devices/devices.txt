

             &&
     ,_____&&&_____,
    //             \\
   //               \\
   |  P u m p k i n  | 
   |                 | 
   \\    C e l l    //
    \\             //
     '\___________/'

   
     
======================================
-=-=-                            -=-=-
-=-=-=-  Device I/O (16-bit)   -=-=-=-
-=-=-                            -=-=-
======================================



   Software Developer's Manual
   
           Version 1.0
   
   
   Copyright (c) SyberMCd 2021
   Copyright (c) Adam2004yt 2021
   
   
   Prototype built by:
    Adam2004yt
    PumpkinCell
    SyberMCd



====================================



   ===== SHORTCUTS =====

   

rt - repeater ticks
Res - Result
IRQ - Interrupt Request
ISR - Interrupt Service Routine
I/O - Input/Output



   ===== I/O PROTOCOL =====



The I/O protocol is a half-duplex, parallel interface for 
doing I/O operations. There are 2 types of I/O users:
- Master - controls I/O operations; typically CPU
- Slave - responds to master's signals; typically devices.


-- Physical overview --

 Master                   Slave
 ,---,                    ,---,
 |   |=<=== DAT0 IN ====<=|   |
 |   |=>=== DAT0 OUT ===>=|   |
 |   |=<=== DAT1 IN ====<=|   |
 |   |=>=== DAT1 OUT ===>=|   |
 |   |-<--- IN FIN -----<-|   |
 |   |->--- OUT FIN ---->-|   |
 |   |->--- IN REQ ----->-|   |
 |   |->---- MODE ------>-|   |
 '---'                    '---'

DAT0 IN - 8-bit Input data (LSB)
DAT0 OUT - 8-bit Output data (LSB)
DAT1 IN - 8-bit Input data (MSB)
DAT1 OUT - 8-bit Output data (MSB)
IN FIN - Whether the slave has finished transmitting or receiving data.
OUT FIN - Whether the master has finished transmitting or receiving data.
IN RQ - Master's request for input
MODE - If 0, slave will send data only through DAT0 line. (for 8-bit I/O)
 
The entire bus created by the lines above is named
'data bus' (DATA). It is simply drawn as below:

 Master                Slave
 ,---,                ,---,
 |   |=<>== DATA ==<>=|   |
 '---'                '---'

 
-- OUT procedure --

1. If 16-bit OUT, Master sets MODE bit.
2. Master sets DAT0 OUT lines to transmitted value's LSB.
3. If 16-bit OUT, Master sets DAT1 OUT to transmitted value's MSB.
4. Master sets OUT FIN line to indicate that transmision has finished.
5. Slave sets IN FIN line to inform Master that they successfully received the data.
6. Master clears OUT FIN and MODE line. Slave clears IN FIN line.


-- IN procedure --

1. If 16-bit IN, Master sets MODE bit.
2. Master sets IN REQ line to request input from Slave.
3. Slave sets DAT0 OUT lines to transmitted value's LSB.
4. If MODE is set, Slave sets DAT1 OUT to transmitted value's MSB.
5. Slave sets IN FIN line to indicate that transmision has finished.
6. Master sets OUT FIN line to inform Slave that they successfully received the data.
7. Slave clears IN FIN line. Master clears OUT FIN, MODE and IN REQ line.


-- I/O switch --

An I/O switch expands 1 master line to several slave's lines.
It needs an additional 8-bit PORT line for select destination 
slave:
                 
                       Switch
 Master                ,---,    ,-,
 ,---,                 |   |=<>=|0|
 |   |=<>== DATA ===<>=|   |    '-'
 |   |=>=== PORT ====>=|   |    ,-,
 '---'                 |   |=<>=|1|
                       '---'    '-'
 
The switches can be connected cascading. The port line must
be wider:
                 
                      Sw. layer1          Sw. layer2         Slaves
 Master                 ,---,               ,--,
                        |   |=<>= DATA ==<>=|0 |=<>= DATA =<>=[00]
 ,---,                  | ,-|=>== PORT1 ==>=|  |=<>= DATA =<>=[01]
 |   |=<>== DATA ====<>=| | |               '--'
 |   |=>=== PORT01 ===>=|-| |               ,--,
 '---'                  | | |=<>= DATA ==<>=|1 |=<>= DATA =<>=[10]
                        | '-|=>== PORT1 ==>=|  |=<>= DATA =<>=[11]
                        '---'               '--'

In the above example, the PORT0 line is used to address 2 layer2
switches and PORT1 to 2 slaves for each layer2 switch. The resulting
PORT01 line is 16-bit wide.



   ===== I/O PORTS & IRQs =====
   
   

There are 16 I/O half-duplex ports connected to CPU.
Each port is assigned to specific device. Every device
can have its own IRQ assigned. It's done in southbridge.

For Graphics Card (which is connected to northbridge), 
there is 1 port (PORT15) and 1 IRQ (IRQ6) reserved. 

The IRQ7 is reserved as Cascading IRQ. It will be used
in extended versions of computer.


-- Ports --

PORT  Res+Purpose
----------------------------------------------
0     V  Legacy I/O [Programmable Interval Timer]
1     V  Legacy I/O [Keyboard]
2     V  Legacy I/O [Mass storage]
3     V  Legacy I/O [Soundcard]
4     V  Legacy I/O [Programmable Interrupt Controller]
5     V  Legacy I/O [Power Management Interface]
6     V  Legacy I/O [ROM]
7     V  Legacy I/O [Real Time Clock]
8     -  Legacy I/O [-]
----------------------------------------------
9     R  Device Info
10    R  Slow I/O (Port 2) [Reserved]
11    R  Slow I/O (Port 1) [Reserved]
12    R  Slow I/O (Port 0) [Reserved]
----------------------------------------------
13    R  Fast I/O (Port 2) [Reserved]
14    R  Fast I/O (Port 1) [Reserved]
15    V  Fast I/O (Port 0) [GFX]
----------------------------------------------


-- IRQs --

IRQ  Res+Purpose
----------------------------------------------
0    V  Legacy I/O [Programmable Interval Timer]
1    V  Legacy I/O [Keyboard]
2    V  Legacy I/O [Power Management Interface]
3    V  Legacy I/O [Mass storage]
4    V  Legacy I/O [Soundcard]
5    R  Slow I/O [Ports 0-2]
6    V  Fast I/O [Ports 0-2]
7    R  Cascaded IRQ [Reserved]
----------------------------------------------



   ===== I/O CONVENTIONS FOR DEVICES =====



-- Any I/O --

Synchronous command
-out8 cmd
[-out16 args...]
[-in16 results]

Asynchronous command
-out8 cmd
[-out16 args...]
irq
-in8 cmd
[-in16 results]

Register read
-out8 0x00
-out8 register
-in16 value

Register write
-out8 0x01
-out8 register
-out16 value
[-in8 status (0 - Success, 1 - Invalid Operation, ...)]


-- Legacy I/O specific --

Legacy I/O plain interrupt
- device-specific

Legacy I/O interrupt with command
-in8 port, cmd
[-in16 port, result]


-- Slow I/O specific --

Slow I/O interrupt with command:
-in8 port, dev
-in8 port, cmd
[-in16 port, result]


-- Fast I/O specific --

Fast I/O interrupt with command:
-in8 port, dev
-in8 port, cmd
[-in16 port, result]


-- Device Info --

Get DI by Device Port:
-out8 0x9, port
-in8 0x9, status                     // AXCPVVVV / Version-Assigned-eXtendedCaps-knownCaps-Present
[-in8 0x9, caps] if knownCaps        // xxxxrrrr / (x:device specific)-(reserved)
[-in16 0x9, excaps] if eXtendedCaps  // xxxxxxxxxxxxxxxx / (x:device specific)

Get Self-DI:
-out 0x9, 0x9
-in8 0x9, status   // 0000101P / Present
-in8 0x9, caps    // 00000000000rVVVV / (reserved for DI2)-Version

Prototype DI version: 0x1 (1.0).



   =====  DEVICES =====



-- Programmable Interval Timer --

- IRQ 0
- Port 0
- Registers
    RID   Size Acc  Purpose
    0x00  8    RW   Interval in rt
    0x01  16   R    Ticks since boot
- IRQs
    IRQN  Purpose
    0x00  Timer Tick


-- Keyboard --

- IRQ 1
- Port 1
- Registers
    RID   Acc Size  Purpose
    0x00  RW  8(3)  LED State (000000Nr / NumLock-Reserved)
    0x01  R   8(3)  Control Key State (000000CS / Control-Shift)
- IRQ Commands
    ICID  Res             Purpose
    0x00  [scancode(16)]  Key Press


-- Graphics Card --

- IRQ 6
- Port 15
- DI Capabilities
    - 0
    - 1  #DB  Double Buffer
    - 1  #FO  Fill Operations
    - 1  #VM  Graphics Video Mode
- Registers
    RID   Acc Size  Purpose
    0x00  RW  8(1)  Video Mode (0000000T / TextMode) [???]
    0x01  R   16    Screen Size (xxxxxxxxyyyyyyyy - default: 64x128)
    0x02  RW  16    Framebuffer Address
- Commands
    color - (0-Black,1-White or ASCII character)
    CID   Args                          Res  Purpose
    0x02  [color(8)]                    []   Clear Framebuffer
    0x03  [x,y(8+8);color(8)]           []   Set Pixel
    0x04  [x,y(8+8);w,h(8+8);color(8)]  []   Fill Rect
    0x05  [x,y(8+8);w,h(8+8)]           []   Flush Rect
    0x06  [x,y(8+8);size(16);op(8)]     []   Fill Framebuffer from Memory RAM[fbaddr:size] using op: 0(=) 1(&) 2(|) 3(^)


-- Mass storage --

- IRQ 3
- Port 2
- DI Capabilities
    - 0
    - 0
    - 0  
    - 1  #DN  Directory-unique Names
- Registers
    RID   Acc Size  Purpose
    0x00  R   16    Filled storage (in B)
    0x01  R   16    ID counter (binary int)
    0x02  RW  16    User address (address of current user's location)
- Commands
    CID   Args                            Res  Purpose
    0x02  [id(16)]                        []   show folder elements by id
    0x03  [id(16)]                        []   delete element by id
    0x04  [id(16);addr(16);size(16)]      []   read element by id to RAM[addr:size]
    0x05  [id(16);addr(16);size(16)]      []   edit element by id to RAM[addr:size]
    0x06  [fid(16);id(16)]                []   move element by id
    
    0x08  [name(4*16)]                    []   get element's id
    0x09  [id(16)]                        []   get element's name
    0x0a  [name(4*16);ext(8);fid(16)]     []   create element
    
    0x12  [name(4*16)]                    []   show folder elements by name
    0x13  [name(4*16)]                    []   delete element with name
    0x14  [name(4*16);addr(16);size(16)]  []   read element by name to RAM[addr:size]
    0x15  [name(4*16);addr(16);size(16)]  []   edit element by name to RAM[addr:size]
    0x16  [fid(16);name(4*16)]            []   move element by name
    
    0x17  [id(16);newname(4*16)]          []   rename element by id to newname
- IRQ Commands
    ICID  Res       Purpose
    0x00  [id(16)]  Read Finished
    0x01  [id(16)]  Write Finished


-- Soundcard --

- IRQ 4
- Port 3
- DI Capabilities
    - 0
    - 0
    - 0  
    - 1  #MC  Multi-Channel
- Registers
    RID   Acc Size  Purpose
    0x00  R   8     Max Channel Count
    0x01  RW  8     Channel Mask (used to mute channels)
    0x02  RW  8     Play Mode (0000000L / Loop)
    0x03  R   16    Buffer Size per Sound
- Commands
    CID   Args                            Res  Purpose
    0x02  [addr(16);size(16);channel(8)]  []   Load Sound from RAM(addr:size) to BUF[channel]. If not #MC, do NOT give `channel`.
    0x03  [chmask(8)]                     []   Start Playing
    0x04  [chmask(8)]                     []   Stop Playing
    0x05  [chmask(8)]                     []   Pause Playing


-- Programmable Interrupt Controller --

- Port 4
- Registers
    RID   Acc Size  Purpose
    0x00  RW  8     IRQ mask
- Commands
    CID   Args  Res  Purpose
    0x02  []    []   EOI - clears irq lines


-- Power Management Interface --

- Port 5
- IRQ 2
- DI Capabilities
    - 0
    - 1       Reserved (alternatively for PMI2)
    - 1  #SL  Allow Sleep
    - 1  #RB  Allow Reboot
- Commands
    CID   Args  Purpose
    0x02  []    Shutdown
    0x03  []    Reboot
- IRQ Commands
    ICID  Res  Purpose
    0x00  no   Power-off Button
    0x01  no   Reset Button


-- ROM --

- Port 6
- Commands
    CID   Args        Res         Purpose
    0x02  [addr(16)]  [size(16)]  Load to RAM
    0x03  []          []          Init Buffer


-- Real Time Clock --

- Port 7
- Registers
    RID   Acc Size  Purpose
    0x00  RW  16    MC Days
    0x01  RW  16    MC Ticks
